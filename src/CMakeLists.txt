cmake_minimum_required(VERSION 3.10)
project(game)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)

set(BUILD_BULLET2_DEMOS OFF CACHE BOOL "" FORCE)
set(BUILD_EXTRAS OFF CACHE BOOL "" FORCE)
set(BUILD_UNIT_TESTS OFF CACHE BOOL "" FORCE)
set(OpenGL_GL_PREFERENCE GLVND CACHE BOOL "" FORCE)

set(ENABLE_CTEST OFF CACHE BOOL "" FORCE)

find_package(Vulkan REQUIRED)

set(CMAKE_BUILD_TYPE RelWithDebInfo)
include_directories(../pkg/imgui/)
add_subdirectory(../pkg/entt ../../build/entt)
include_directories(../pkg/entt/src)
add_subdirectory(../pkg/edyn ../../build/edyn)
include_directories(../pkg/edyn/include/edyn)
add_subdirectory(../pkg/glm ../../build/glm)
include_directories(../pkg/glm/)
add_subdirectory(../pkg/glfw ../../build/glfw)
include_directories(../pkg/glfw/include)
add_subdirectory(../pkg/glslang ../../build/glslang)
include_directories(../pkg/glslang/)
set(CMAKE_BUILD_TYPE Debug)
file(GLOB SOURCE_FILES CONFIGURE_DEPENDS "*.cpp")
list(APPEND SOURCE_FILES ../pkg/imgui/imgui.cpp)
list(APPEND SOURCE_FILES ../pkg/imgui/imgui_demo.cpp)
list(APPEND SOURCE_FILES ../pkg/imgui/imgui_draw.cpp)
list(APPEND SOURCE_FILES ../pkg/imgui/imgui_tables.cpp)
list(APPEND SOURCE_FILES ../pkg/imgui/imgui_widgets.cpp)
list(APPEND SOURCE_FILES ../pkg/imgui/backends/imgui_impl_vulkan.cpp)
list(APPEND SOURCE_FILES ../pkg/imgui/backends/imgui_impl_glfw.cpp)
add_executable(${PROJECT_NAME} ${SOURCE_FILES})

target_link_libraries(${PROJECT_NAME} glfw)
target_link_libraries(${PROJECT_NAME} glslang)
target_link_libraries(${PROJECT_NAME} glslang-default-resource-limits)
target_link_libraries(${PROJECT_NAME} SPIRV)
target_link_libraries(${PROJECT_NAME} Edyn)

if(MSVC)
  target_compile_options(${PROJECT_NAME} PRIVATE /W4 /WX)
else()
  target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Wpedantic -Werror)
endif()

target_link_libraries(${PROJECT_NAME} Vulkan::Vulkan)
target_compile_definitions(${PROJECT_NAME} PUBLIC VULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)
if (WIN32)
    target_compile_definitions(${PROJECT_NAME} PUBLIC NOMINMAX VK_USE_PLATFORM_WIN32_KHR)
elseif (APPLE)
    target_compile_definitions(${PROJECT_NAME} PUBLIC VK_USE_PLATFORM_MACOS_MVK)
elseif (UNIX)
	target_compile_definitions(${PROJECT_NAME} PUBLIC VK_USE_PLATFORM_XCB_KHR)
endif ()
