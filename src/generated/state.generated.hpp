#pragma once

// DO NOT EDIT THIS FILE! It is automatically generated.

static void register_generated_reflection() {
    entt::meta<Player>()
            .data<&Player::possessionId>("possessionId"_hs);
    entt::meta<GroundedPlayerMove>()
            .data<&GroundedPlayerMove::gravity>("gravity"_hs)
            .data<&GroundedPlayerMove::walkSpeed>("walkSpeed"_hs)
            .data<&GroundedPlayerMove::runSpeed>("runSpeed"_hs)
            .data<&GroundedPlayerMove::fwdSpeed>("fwdSpeed"_hs)
            .data<&GroundedPlayerMove::sideSpeed>("sideSpeed"_hs)
            .data<&GroundedPlayerMove::airSpeedCap>("airSpeedCap"_hs)
            .data<&GroundedPlayerMove::airAccel>("airAccel"_hs)
            .data<&GroundedPlayerMove::maxAirSpeed>("maxAirSpeed"_hs)
            .data<&GroundedPlayerMove::accel>("accel"_hs)
            .data<&GroundedPlayerMove::friction>("friction"_hs)
            .data<&GroundedPlayerMove::frictionCutoff>("frictionCutoff"_hs)
            .data<&GroundedPlayerMove::jumpSpeed>("jumpSpeed"_hs)
            .data<&GroundedPlayerMove::stopSpeed>("stopSpeed"_hs)
            .data<&GroundedPlayerMove::groundTick>("groundTick"_hs);
    entt::meta<FlyPlayerMove>()
            .data<&FlyPlayerMove::speed>("speed"_hs);
    entt::meta<Material>()
            .data<&Material::baseColorFactor>("baseColorFactor"_hs)
            .data<&Material::emissiveFactor>("emissiveFactor"_hs)
            .data<&Material::diffuseFactor>("diffuseFactor"_hs)
            .data<&Material::specularFactor>("specularFactor"_hs)
            .data<&Material::workflow>("workflow"_hs)
            .data<&Material::baseColorTextureSet>("baseColorTextureSet"_hs)
            .data<&Material::physicalDescriptorTextureSet>("physicalDescriptorTextureSet"_hs)
            .data<&Material::normalTextureSet>("normalTextureSet"_hs)
            .data<&Material::occlusionTextureSet>("occlusionTextureSet"_hs)
            .data<&Material::emissiveTextureSet>("emissiveTextureSet"_hs)
            .data<&Material::metallicFactor>("metallicFactor"_hs)
            .data<&Material::roughnessFactor>("roughnessFactor"_hs)
            .data<&Material::alphaMask>("alphaMask"_hs)
            .data<&Material::alphaMaskCutoff>("alphaMaskCutoff"_hs);

}
